/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "../interface/AngularRT.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(AngularRT) 

 AngularRT::AngularRT(const char *name, const char *title, 
                        RooAbsReal& _ctK,
                        RooAbsReal& _ctL,
                        RooAbsReal& _phi,
                        RooAbsReal& _FsS,
                        RooAbsReal& _AsS,
                        RooAbsReal& _As5S,
                        RooAbsReal& _FlS,
                        RooAbsReal& _P1S,
                        RooAbsReal& _P5pS) :
   RooAbsPdf(name,title), 
   ctK("ctK","ctK",this,_ctK),
   ctL("ctL","ctL",this,_ctL),
   phi("phi","phi",this,_phi),
   FsS("FsS","FsS",this,_FsS),
   AsS("AsS","AsS",this,_AsS),
   As5S("As5S","As5S",this,_As5S),
   FlS("FlS","FlS",this,_FlS),
   P1S("P1S","P1S",this,_P1S),
   P5pS("P5pS","P5pS",this,_P5pS)
 { 
 } 


 AngularRT::AngularRT(const AngularRT& other, const char* name) :  
   RooAbsPdf(other,name), 
   ctK("ctK",this,other.ctK),
   ctL("ctL",this,other.ctL),
   phi("phi",this,other.phi),
   FsS("FsS",this,other.FsS),
   AsS("AsS",this,other.AsS),
   As5S("As5S",this,other.As5S),
   FlS("FlS",this,other.FlS),
   P1S("P1S",this,other.P1S),
   P5pS("P5pS",this,other.P5pS)
 { 
 } 



 Double_t AngularRT::evaluate() const 
 { 
   return (9./(8 * 3.14159265) * (
				 2./3 * (
					(FsS +  AsS*ctK) * (1-ctL*ctL) +
				 	(As5S*0.89*sqrt(3*(FsS)*(1-(FsS))*(1-(FlS))*(1+P1S)))*sqrt((1-ctL*ctL)*(1-ctK*ctK))*cos(phi)
					) +
				 (1-FsS) * (
					    2 *  FlS * (1-ctL*ctL) * ctK*ctK +
					    0.5 * (1 - FlS) * (1+ctL*ctL) * (1-ctK*ctK) +
					    0.5 * P1S * (1-FlS) * (1-ctK*ctK) * (1-ctL* ctL) * cos(2*phi) +
					    2 * P5pS * cos(phi) * ctK * sqrt(FlS * (1-FlS) * (1-ctK*ctK) * (1-ctL*ctL)) 
					    )
				 )
	   );
 } 



